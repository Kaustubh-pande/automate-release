name: Trigger build on PR and Create Tag and Release with Changelog

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the new release'
        required: true

permissions:
  contents: write
  packages: write
  pull-requests: write
  
jobs:
  fetch-tag:
    runs-on: ubuntu-latest
    outputs:
      old_tag: ${{ steps.get_tag.outputs.old_tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      
      - name: Get latest tag
        id: get_tag
        run: |
          echo "old_tag_name=$(git ls-remote --tags origin | awk -F'/' '{print $3}' | grep -v '{}' | sort -V | tail -n1)" >> $GITHUB_OUTPUT
      - name: print tag
        id: print_tag
        run: | 
          echo "Old Tag=${{ steps.get_tag.outputs.old_tag_name }}"
          echo "NEW_TAG=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
          echo "$(basename ${{ github.ref }})"

      - name: Check if tag exists
        id: check_tag
        run: |
         import sys
         import subprocess
         tag_name = "${{ github.event.inputs.tag_name }}"
         command = ['git', 'tag', '-l', tag_name]
         output = subprocess.check_output(command, stderr=subprocess.STDOUT)
         if output.decode() != "":
           print(f"Error: Tag '{tag_name}' already exists.", file=sys.stderr)
           sys.exit(1)
         else:
           print(f"Tag '{tag_name}' does not exists.")
        
        shell: python
        continue-on-error: false

#this works only if params.env contains image:tag_version_number
  update-params-env:
    runs-on: ubuntu-latest
    needs: fetch-tag
    outputs:
      param_env: ${{ steps.read_params_env.outputs.params_env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
              
      - name: Update params.env with new release version
        run: |     
          sed -i 's|:v[0-9.]*\b|:${{ github.event.inputs.tag_name }}|gm' config/params.env
      - name: Commit changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          BRANCH_NAME="update-param-env-${{ github.event.inputs.tag_name }}-$(date +%s)"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME
          git add config/params.env
          git commit -m "Update image refs for odh release."
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        id: cpr
        with:
          commit-message: update changelog
          title: '[ODH Release] Update images for ${{ github.event.inputs.tag_name }}'
          body: Update images for ${{ github.event.inputs.tag_name }}
          token: ${{ github.token }}
        
          
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v4
      #   id: cpr
      #   with:
      #     # commit-message: Update image refs for odh release
      #     title: '[ODH Release] Update images for ${{ github.event.inputs.tag_name }}'
      #     body: Update images for ${{ github.event.inputs.tag_name }}
      #     token: ${{ github.TOKEN}}
      #     base: ${{ github.ref }}
      #     branch: ${{env.BRANCH_NAME}}
      #     # delete-branch: true
       
      - name: Create Tag
        id: create_tag
        run: |
          git tag -a ${{ github.event.inputs.tag_name }} -m "Prepare for ODH release ${{ github.event.inputs.tag_name }}"
          git push origin ${{ github.event.inputs.tag_name }}

  changelog:
    name: Changelog
    needs: [fetch-tag,update-params-env]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ github.TOKEN }}
          tag_name: ${{ github.event.inputs.tag_name }}
          prerelease: false
          draft: false
    #this takes the path of payload to upload as an asset in the changelog
          files: bin/*
          generate_release_notes: true
          name: ${{ github.event.inputs.tag_name }}
