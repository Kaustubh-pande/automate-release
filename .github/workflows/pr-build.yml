name: Automate PR builds/image for Kserve

on:
  pull_request: 
   types: [opened, synchronize, reopened]
  #  paths:
  #     - '.github/workflows/scheduled-go-security-scan.yml'
  #     - '.github/workflows/go.yml'
   
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Quay.io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build Docker image
        run: docker build -t quay.io/${{ secrets.QUAY_USERNAME }}/test:${{ github.sha }} .

      - name: Push Docker image
        run: docker push quay.io/${{ secrets.QUAY_USERNAME }}/test:${{ github.sha }}

    
      # Leave comment
      - uses: peter-evans/find-comment@v3
        name: Find Comment
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes:  PR image build and manifest generation completed successfully
      - uses: peter-evans/create-or-update-comment@v4
        name: Generate/update success message comment
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            PR image build and manifest generation completed successfully!
            
            ðŸ“¦ [PR image](https://quay.io/rpancham/test:${{ github.event.pull_request.head.sha }}): `quay.io/rpancham/test:${{ github.event.pull_request.head.sha }}`

  auto-merge:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for LGTM label
        id: check-label
        run: |
          labels=$(jq -r '.pull_request.labels | .[] | .name' "$GITHUB_EVENT_PATH")
          echo "Labels on the PR: $labels"
          if [[ "$labels" == *"LGTM"* ]]; then
            echo "LGTM label found"
            echo "lgtm_label=true" >> $GITHUB_ENV
          else
            echo "LGTM label not found"
            echo "lgtm_label=false" >> $GITHUB_ENV

      - name: Wait for CI checks to pass
        id: wait-for-ci
        uses: chelnak/wait-for-check@v1
        with:
          check-name: Build, Test, and Push Docker Image on PR
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Merge PR
        if: steps.check-label.outputs.lgtm_label == 'true' && steps.wait-for-ci.outputs.conclusion == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            if (pr.data.mergeable) {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash'
              });
              console.log('PR merged successfully!');
            } else {
              console.log('PR is not mergeable');
            }


  








