name: Pull Upstream and Remove Merged Downstream Patches

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: 'Select Upstream Repository'
        required: true
        type: choice
        options:
          - 'openvino_model_server'
          - 'kserve'
          - 'modelmesh'
          - 'caikit-tgis-serving'
          - 'openvino'
          - 'vllm'
          - 'caikit-nlp'
          - 'caikit'
          - 'odh-model-controller'
          - 'caikit-tgis-backend'
          - 'caikit-nlp-client'
          - 'model-registry'
      upstream_branch:
        description: 'Upstream branch to pull from'
        required: true
      target_branch:
        description: 'Target branch to pull into'
        required: true
      pr_title:
        description: 'Title for the PR'
        required: false
      pr_body:
        description: 'Body for the PR'
        required: false

jobs:
  pull_and_clean:
    runs-on: ubuntu-latest
    env:
      BASE_UPSTREAM_URL: https://github.com/opendatahub-io/  # Replace with your actual upstream base URL if different
      BASE_TARGET_URL: https://github.com/red-hat-data-services/  # Replace with your target repo owner

    steps:
      - name: Set repository
        id: set-repo
        run: |
          echo "upstream_org_repo=opendatahub-io/${{ github.event.inputs.upstream_repo }}" >> <span class="math-inline">GITHUB\_OUTPUT
echo "target\_org\_repo\=red\-hat\-data\-services/</span>{{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT  # Use target_branch for target repo

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Checkout target branch
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.set-repo.outputs.target_org_repo }}
          ref: ${{ github.event.inputs.target_branch }}

      - name: Add upstream repository
        run: |
          git remote add upstream <span class="math-inline">\{\{ env\.BASE\_UPSTREAM\_URL \}\}</span>{{ github.event.inputs.upstream_repo }}.git
          git fetch upstream

      - name: Find our merge commit (optional)
        id: find_merge_commit
        run: |
          our_merge_commit=$(git log --merges --grep="^Merge pull request" --first-parent origin/main..HEAD)
          if [[ -z "$our_merge_commit" ]]; then
            echo "No downstream patch merge commit found."
          else
            echo "Our merge commit: $our_merge_commit"
          fi
        outputs:
          our_merge_commit: ${{ steps.find_merge_commit.outputs.our_merge_commit }}

      - name: Cherry-pick upstream changes (interactive)
        run: |
          git fetch upstream
          git checkout <span class="math-inline">\{\{ github\.event\.inputs\.target\_branch \}\}
git cherry\-pick \-\-interactive upstream/</span>{{ github.event.inputs.upstream_branch }}

          # In the editor, review commits and skip our_merge_commit (if found)
          if [[ -n "${{ steps.find_merge_commit.outputs.our_merge_commit }}" ]]; then
            echo "Skipping our downstream merge commit: ${{ steps.find_merge_commit.outputs.our_merge_commit }}"
            git cherry-pick --skip ${{ steps.find_merge_commit.outputs.our_merge_commit }}
          fi

      - name: Push changes to target branch
        run: |
          git push origin ${{ github.event.inputs.target_branch }}

      - name: Create Pull Request (Optional)
        uses: peter-evans/create-pull-request@v4
        if: ${{ github.event.inputs.pr_title || github.event.inputs.pr_body }}  # Only create PR if title or body is provided
        with:
          token: <span class="math-inline">\{\{ secrets\.PAT\_TOKEN \}\}
commit\-message\: "Rebase and cleanup\: remove patches merged upstream"
branch\: "cleanup\-</span>{{ github.
