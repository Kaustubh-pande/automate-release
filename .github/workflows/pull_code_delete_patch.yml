name: Pull from Upstream and Remove Merged Patches

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: 'Select Upstream Repository'
        required: true
        type: choice
        options:
          - 'openvino_model_server'
          - 'kserve'
          - 'modelmesh'
          - 'caikit-tgis-serving'
          - 'openvino'
          - 'vllm'
          - 'caikit-nlp'
          - 'caikit'
          - 'odh-model-controller'
          - 'caikit-tgis-backend'
          - 'caikit-nlp-client'
          - 'model-registry'
      upstream_branch:
        description: 'Upstream branch to pull from'
        required: true
      target_branch:
        description: 'Target branch to pull into'
        required: true
      pr_title:
        description: 'Title for the PR'
        required: false
      pr_body:
        description: 'Body for the PR'
        required: false

jobs:
  pull_and_clean:
    runs-on: ubuntu-latest
    env:
      BASE_UPSTREAM_URL: https://github.com/opendatahub-io/  # Replace with your actual upstream base URL if different
      BASE_TARGET_URL: https://github.com/red-hat-data-services/  # Replace with your target repo owner

    steps:
      - name: Set repository
        id: set-repo
        run: |
          echo "upstream_org_repo=opendatahub-io/${{ github.event.inputs.upstream_repo }}" >> $GITHUB_OUTPUT
          echo "target_org_repo=red-hat-data-services/${{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT  # Use target_branch for target repo

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Checkout target branch
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.set-repo.outputs.target_org_repo }}
          ref: ${{ github.event.inputs.target_branch }}

      - name: Add upstream repository
        run: |
          git remote add upstream ${{ env.BASE_UPSTREAM_URL }}${{ github.event.inputs.upstream_repo }}.git
          git fetch upstream

      - name: Rebase onto upstream
        run: |
          git rebase upstream/${{ github.event.inputs.upstream_branch }}

      - name: Remove merged patches
        run: |
          # List commits in target branch but not in upstream branch
          merged_commits=$(git log upstream/${{ github.event.inputs.upstream_branch }}..${{ github.event.inputs.target_branch }} --pretty=format:"%h")
          if [[ -z "$merged_commits" ]]; then
            echo "No merged commits found in target branch."
          else
            echo "Following commits will be removed:"
            echo "$merged_commits"
            # Interactive rebase to drop merged commits
            git rebase -i upstream/${{ github.event.inputs.upstream_branch }} --autosquash
          fi

      - name: Push changes to target branch
        run: |
          git push origin ${{ github.event.inputs.target_branch }} --force  # Force push with caution

      - name: Create Pull Request (Optional)
        uses: peter-evans/create-pull-request@v4
        if: ${{ github.event.inputs.pr_title || github.event.inputs.pr_body }}  # Only create PR if title or body is provided
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "Rebase and cleanup: remove patches merged upstream"
          branch: "cleanup-${{ github.event.inputs.target_branch }}"
          base: ${{ github.event.inputs.target_branch }}
          title: "${{ github.event.inputs.pr_title || format('Rebase and cleanup into {}', github.event.inputs.target_branch) }}"
          body: "${{ github.event.inputs.pr_body || 'Rebased and removed patches that were merged upstream.' }}"





####chat gpt 

name: Pull from Upstream and Delete Merged Patches

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: 'Select Upstream Repository'
        required: true
        type: choice
        options:
          - 'openvino_model_server'
          - 'kserve'
          - 'modelmesh'
          - 'caikit-tgis-serving'
          - 'openvino'
          - 'vllm'
          - 'caikit-nlp'
          - 'caikit'
          - 'odh-model-controller'
          - 'caikit-tgis-backend'
          - 'caikit-nlp-client'
          - 'model-registry'
      upstream_branch:
        description: 'Upstream branch to pull from'
        required: true
      target_branch:
        description: 'Target branch to pull into'
        required: true
      patch_commits:
        description: 'Comma-separated list of commit SHAs to cherry-pick'
        required: true
      pr_title:
        description: 'Title for the PR'
        required: false
      pr_body:
        description: 'Body for the PR'
        required: false

jobs:
  pull_and_update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.target_branch }}

      - name: Set up git configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/${{ github.event.inputs.upstream_repo }}.git
          git fetch upstream

      - name: Pull from upstream branch
        run: |
          git pull upstream ${{ github.event.inputs.upstream_branch }}

      - name: Remove downstream patches
        run: |
          patch_commits="${{ github.event.inputs.patch_commits }}"
          IFS=',' read -ra commits <<< "$patch_commits"
          for commit in "${commits[@]}"; do
            if git branch upstream_temp --contains $commit >/dev/null 2>&1; then
              git revert $commit --no-edit || git revert --abort
            fi
          done

      - name: Push changes
        run: |
          git push origin HEAD:${{ github.event.inputs.target_branch }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Update from upstream and remove merged patches'
          branch: ${{ github.event.inputs.target_branch }}
          title: ${{ github.event.inputs.pr_title || 'Update from upstream and remove merged patches' }}
          body: ${{ github.event.inputs.pr_body || 'This PR includes updates from the upstream repository and removes patches that have been merged upstream.' }}

